1. hello flutter
import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});
  
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
        title: 
        const Text('Hello World')),
        body: const Center(child: 
        Text('Hello World!', 
        style: TextStyle(fontSize: 24)
        )),
      ),
    );
  }
}

2. stateless widget
import 'package:flutter/material.dart';

void main() {
  runApp(const MyStatelessApp());
}

class MyStatelessApp extends StatelessWidget {
  const MyStatelessApp({super.key});
  
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: Center(child: Text('This is a Stateless Widget')),
      ),
    );
  }
}

3. stateful widget
import 'package:flutter/material.dart';

void main(){
  runApp(myApp());
}

class myApp extends StatelessWidget{
  const myApp({super.key});
  @override
  Widget build(BuildContext context){
    return MaterialApp(home: CounterScreen());
  }
}
class CounterScreen extends StatefulWidget{
  const CounterScreen({super.key});
  @override
  State<CounterScreen> createState() => _CounterScreenState();
}
class _CounterScreenState extends State<CounterScreen> {
  int counter = 0;
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Counter')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Counter: $counter', style: const TextStyle(fontSize: 30)),
            ElevatedButton(
              onPressed: () {
                setState(() {
                  counter++;
                });
              },
              child: const Text('Increment'),
            ),
          ],
        ),
      ),
    );
  }
}

4. pizza stateful application
import 'package:flutter/material.dart';

void main() {
  runApp(const PizzaApp());
}

class PizzaApp extends StatelessWidget {
  const PizzaApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Pizza Order',
      theme: ThemeData(
        primarySwatch: Colors.deepOrange,
      ),
      home: const PizzaOrderPage(),
    );
  }
}

class PizzaOrderPage extends StatefulWidget {
  const PizzaOrderPage({super.key});

  @override
  _PizzaOrderPageState createState() => _PizzaOrderPageState();
}

class _PizzaOrderPageState extends State<PizzaOrderPage> {
  String _selectedSize = 'Medium';
  String _selectedTopping = 'Pepperoni';
  int _quantity = 1;
  double _totalCost = 0.0;

  final List<String> _toppings = [
    'Pepperoni',
    'Mushroom',
    'Onions',
  ];

  // Pricing based on size
  double _getPricePerPizza() {
    switch (_selectedSize) {
      case 'Small':
        return 8.0;
      case 'Medium':
        return 10.0;
      case 'Large':
        return 12.0;
      default:
        return 10.0;
    }
  }

  void _calculateTotalCost() {
    setState(() {
      _totalCost = _getPricePerPizza() * _quantity;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Pizza Order'),
        backgroundColor: Colors.deepOrange,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView( // in case of smaller devices
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'Select Size:',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              DropdownButton<String>(
                value: _selectedSize,
                items: ['Small', 'Medium', 'Large'].map((size) {
                  return DropdownMenuItem(
                    value: size,
                    child: Text(size),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _selectedSize = value!;
                    _calculateTotalCost();
                  });
                },
              ),
              const SizedBox(height: 20),
              const Text(
                'Select Topping:',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              DropdownButton<String>(
                value: _selectedTopping,
                items: _toppings.map((topping) {
                  return DropdownMenuItem(
                    value: topping,
                    child: Text(topping),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _selectedTopping = value!;
                  });
                },
              ),
              const SizedBox(height: 20),
              const Text(
                'Select Quantity:',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              Row(
                children: [
                  IconButton(
                    onPressed: () {
                      if (_quantity > 1) {
                        setState(() {
                          _quantity--;
                          _calculateTotalCost();
                        });
                      }
                    },
                    icon: const Icon(Icons.remove),
                  ),
                  Text(
                    '$_quantity',
                    style: const TextStyle(fontSize: 18),
                  ),
                  IconButton(
                    onPressed: () {
                      setState(() {
                        _quantity++;
                        _calculateTotalCost();
                      });
                    },
                    icon: const Icon(Icons.add),
                  ),
                ],
              ),
              const SizedBox(height: 30),
              Center(
                child: ElevatedButton(
                  onPressed: _calculateTotalCost,
                  child: const Text('Calculate Total'),
                ),
              ),
              const SizedBox(height: 20),
              Center(
                child: Text(
                  'Total Cost: \$${_totalCost.toStringAsFixed(2)}',
                  style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

5. form validation 
import 'package:flutter/material.dart';

void main(){
  runApp(myApp());
}

class myApp extends StatelessWidget{
  const myApp({super.key});
  @override
  Widget build(BuildContext context){
    return MaterialApp(debugShowCheckedModeBanner: false,home: FormScreen());
  }
}
class FormScreen extends StatefulWidget {
  @override
  _FormScreenState createState() => _FormScreenState();
}
class _FormScreenState extends State<FormScreen> {
  final _formKey = GlobalKey<FormState>();
  String? _name;
  String? _email;
  String? _password;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Form Validation')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                decoration: InputDecoration(labelText: 'Name'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter your name';
                  }
                  return null;
                },
                onSaved: (value) => _name = value,
              ),
              TextFormField(
                decoration: InputDecoration(labelText: 'Email'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter your email';
                  } else if (!RegExp(r'^[^@]+@[^@]+\.[^@]+').hasMatch(value)) {
                    return 'Please enter a valid email address';
                  }
                  return null;
                },
                onSaved: (value) => _email = value,
              ),
              TextFormField(
                decoration: InputDecoration(labelText: 'Password'),
                obscureText: true,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter your password';
                  } else if (value.length < 6) {
                    return 'Password must be at least 6 characters long';
                  }
                  return null;
                },
                onSaved: (value) => _password = value,
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState!.validate()) {
                    _formKey.currentState!.save();
                    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Processing Data')));
                    // Process data here
                  }
                },
                child: Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

6. RT firebase CRUD
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firebase RTDB CRUD',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final String databaseUrl = 'https://mad-lab-39658-default-rtdb.firebaseio.com/'; // Replace with your Firebase project URL
  List<dynamic> dataList = [];
  TextEditingController nameController = TextEditingController();
  TextEditingController valueController = TextEditingController();
  String? editingKey; // for knowing if we are editing an existing item

  @override
  void initState() {
    super.initState();
    fetchData();
  }

  // Create or Update
  Future<void> addOrUpdateData(String name, String value) async {
    if (editingKey == null) {
      // New item (Create)
      final response = await http.post(
        Uri.parse('$databaseUrl/data.json'),
        headers: <String, String>{
          'Content-Type': 'application/json; charset=UTF-8',
        },
        body: jsonEncode(<String, String>{
          'name': name,
          'value': value,
        }),
      );

      if (response.statusCode != 200) {
        throw Exception('Failed to add data: ${response.statusCode}.');
      }
    } else {
      // Update existing item
      final response = await http.patch(
        Uri.parse('$databaseUrl/data/$editingKey.json'),
        headers: <String, String>{
          'Content-Type': 'application/json; charset=UTF-8',
        },
        body: jsonEncode(<String, String>{
          'name': name,
          'value': value,
        }),
      );

      if (response.statusCode != 200) {
        throw Exception('Failed to update data: ${response.statusCode}.');
      }
    }

    fetchData(); // Refresh data after add/update
    nameController.clear();
    valueController.clear();
    editingKey = null; // Reset after updating
  }

  // Read
  Future<void> fetchData() async {
    final response = await http.get(Uri.parse('$databaseUrl/data.json'));

    if (response.statusCode == 200) {
      final Map<String, dynamic> fetchedData = json.decode(response.body) ?? {};
      List<dynamic> tempList = [];
      fetchedData.forEach((key, value) {
        tempList.add(MapEntry(key, value));
      });
      setState(() {
        dataList = tempList;
      });
    } else {
      throw Exception('Failed to fetch data: ${response.statusCode}');
    }
  }

  // Delete
  Future<void> deleteData(String id) async {
    final response = await http.delete(Uri.parse('$databaseUrl/data/$id.json'));

    if (response.statusCode == 200) {
      fetchData(); // Refresh data after deleting
    } else {
      throw Exception('Failed to delete data: ${response.statusCode}');
    }
  }

  void startEditing(String key, Map value) {
    setState(() {
      nameController.text = value['name'];
      valueController.text = value['value'];
      editingKey = key;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Firebase RTDB CRUD'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: <Widget>[
            TextField(
              controller: nameController,
              decoration: InputDecoration(labelText: 'Name'),
            ),
            TextField(
              controller: valueController,
              decoration: InputDecoration(labelText: 'Value'),
            ),
            Padding(
              padding: const EdgeInsets.all(12.0),
              child: ElevatedButton(
                onPressed: () {
                  if (nameController.text.isEmpty || valueController.text.isEmpty) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text('Please fill in both fields')),
                    );
                    return;
                  } else {
                    addOrUpdateData(nameController.text, valueController.text);
                  }
                },
                child: Text(editingKey == null ? 'Add Data' : 'Update Data'),
              ),
            ),
            Expanded(
              child: ListView.builder(
                itemCount: dataList.length,
                itemBuilder: (context, index) {
                  String key = dataList[index].key;
                  dynamic value = dataList[index].value;

                  return Card(
                    elevation: 3,
                    child: ListTile(
                      title: Text(value['name']),
                      subtitle: Text(value['value']),
                      trailing: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: <Widget>[
                          IconButton(
                            icon: Icon(Icons.edit_outlined),
                            onPressed: () {
                              startEditing(key, value);
                            },
                          ),
                          IconButton(
                            icon: Icon(Icons.delete_forever_outlined),
                            onPressed: () {
                              deleteData(key);
                            },
                          ),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}

7. FirestoreDB CRUD
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:myapp/firebase_options.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform

  );
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firestore CRUD Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key? key}) : super(key: key);

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final CollectionReference itemsCollection =
      FirebaseFirestore.instance.collection('items');

  TextEditingController nameController = TextEditingController();
  TextEditingController valueController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Firestore CRUD Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: nameController,
              decoration: InputDecoration(labelText: 'Name'),
            ),
            TextField(
              controller: valueController,
              decoration: InputDecoration(labelText: 'Value'),
            ),
            ElevatedButton(
              onPressed: () {
                addItem(nameController.text, valueController.text);
              },
              child: Text('Add Item'),
            ),
            Expanded(
              child: StreamBuilder<QuerySnapshot>(
                stream: itemsCollection.snapshots(),
                builder: (context, snapshot) {
                  if (snapshot.hasError) {
                    return Center(child: Text('Error: ${snapshot.error}'));
                  }

                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return Center(child: CircularProgressIndicator());
                  }

                  if (!snapshot.hasData) {
                    return Center(child: Text('No data available'));
                  }

                  return ListView(
                    children: snapshot.data!.docs.map((DocumentSnapshot document) {
                      Map<String, dynamic> data =
                          document.data() as Map<String, dynamic>;
                      return ListTile(
                        title: Text(data['name']),
                        subtitle: Text(data['value']),
                        trailing: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            IconButton(
                              icon: Icon(Icons.edit),
                              onPressed: () {
                                updateItemDialog(document.id, data['name'], data['value']);
                              },
                            ),
                            IconButton(
                              icon: Icon(Icons.delete),
                              onPressed: () {
                                deleteItem(document.id);
                              },
                            ),
                          ],
                        ),
                      );
                    }).toList(),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Create
  Future<void> addItem(String name, String value) async {
    await itemsCollection.add({
      'name': name,
      'value': value,
    });
    nameController.clear();
    valueController.clear();
  }

  // Update
  Future<void> updateItemDialog(String id, String currentName, String currentValue) async {
    TextEditingController updateNameController =
        TextEditingController(text: currentName);
    TextEditingController updateValueController =
        TextEditingController(text: currentValue);

    return showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Update Item'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: updateNameController,
                decoration: InputDecoration(labelText: 'Name'),
              ),
              TextField(
                controller: updateValueController,
                decoration: InputDecoration(labelText: 'Value'),
              ),
            ],
          ),
          actions: [
            TextButton(
              child: Text('Cancel'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            TextButton(
              child: Text('Update'),
              onPressed: () {
                updateItem(id, updateNameController.text, updateValueController.text);
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }

  Future<void> updateItem(String id, String newName, String newValue) async {
    await itemsCollection.doc(id).update({
      'name': newName,
      'value': newValue,
    });
  }

  // Delete
  Future<void> deleteItem(String id) async {
    await itemsCollection.doc(id).delete();
  }
}

8. navigation and gestures:
main.dart
import 'package:flutter/material.dart';
import 'package:myapp/second_screen.dart';

void main()  {
  
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firestore CRUD Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  const MyHomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Routing example"),
        ),
        body: Center(
          child:ElevatedButton(onPressed:(){
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => SecondScreen()),
            );
          } , child: Text("Go to second screen")),
        ),
        );
  }
}
second_screen.dart
import 'package:flutter/material.dart';

class SecondScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Second Screen'),actions: [
        IconButton(
          icon: Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
      ]),
      body: Center(child: Text('You are on the Second Screen')),
    );
  }
}


link: https://chatgpt.com/share/680eb4de-2878-800a-a860-af61afa603c3